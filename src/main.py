"""
main.py ‚Äî m√≥dulo principal do Quantum Cryo Bridge
Executa as simula√ß√µes de interface qu√¢ntica com resfriamento criog√™nico.
"""

import os
import sys
from datetime import datetime

# Caminho base do projeto
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DATA_DIR = os.path.join(BASE_DIR, "data", "sample_run_2024")

def verificar_pasta_dados():
    """
    Verifica se a pasta de dados existe.
    Se n√£o existir, exibe erro e interrompe a execu√ß√£o.
    """
    print(f"üìÇ Diret√≥rio base: {BASE_DIR}")
    print(f"üìä Pasta de dados: {DATA_DIR}")

    if not os.path.exists(DATA_DIR):
        raise FileNotFoundError(
            f"ERRO: Pasta de dados n√£o encontrada em: {DATA_DIR}\n"
            "üí° Dica: Crie 'data/sample_run_2024' com os arquivos necess√°rios."
        )

def rodar_simulacoes():
    """
    Executa as simula√ß√µes principais da ponte qu√¢ntica criog√™nica.
    """
    print("\nüöÄ Iniciando simula√ß√µes qu√¢nticas...")

    try:
        # Importa os m√≥dulos de simula√ß√£o
        from src.simulations.quantum_bridge import executar_ponte_quantica
        from src.simulations.cryo_dynamics import simular_dinamica_criogenica
    except ModuleNotFoundError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Verifique se a pasta 'src/simulations' cont√©m __init__.py e os m√≥dulos corretos.")
        sys.exit(1)

    # Executa as simula√ß√µes
    resultados_ponte = executar_ponte_quantica()
    resultados_cryo = simular_dinamica_criogenica()

    print("\n‚úÖ Simula√ß√µes conclu√≠das com sucesso!")
    print(f"üîó Resultados da Ponte Qu√¢ntica: {resultados_ponte}")
    print(f"üßä Resultados Criog√™nicos: {resultados_cryo}")

def salvar_log_execucao():
    """
    Salva um log da execu√ß√£o no diret√≥rio 'logs'.
    """
    logs_dir = os.path.join(BASE_DIR, "logs")
    os.makedirs(logs_dir, exist_ok=True)

    log_path = os.path.join(logs_dir, f"execucao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    with open(log_path, "w", encoding="utf-8") as f:
        f.write("Execu√ß√£o conclu√≠da com sucesso.\n")
        f.write(f"Data: {datetime.now()}\n")
        f.write(f"Diret√≥rio de dados: {DATA_DIR}\n")
    print(f"üìù Log salvo em: {log_path}")

def main():
    """
    Fun√ß√£o principal ‚Äî executa o pipeline completo.
    """
    try:
        verificar_pasta_dados()
        rodar_simulacoes()
        salvar_log_execucao()
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
