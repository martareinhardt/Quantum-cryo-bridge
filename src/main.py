"""
main.py ‚Äî m√≥dulo principal do Quantum Cryo Bridge
Executa as simula√ß√µes de interface qu√¢ntica com resfriamento criog√™nico.
"""

import os
import sys
from datetime import datetime

# === Caminhos base ===
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
FONTE_DIR = os.path.join(BASE_DIR, "fonte")
DATA_DIR = os.path.join(BASE_DIR, "data", "sample_run_2024")
LOGS_DIR = os.path.join(BASE_DIR, "logs")

# === Garantir que o diret√≥rio de c√≥digo-fonte est√° no PYTHONPATH ===
if FONTE_DIR not in sys.path:
    sys.path.insert(0, FONTE_DIR)
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

def verificar_pasta_dados():
    """
    Verifica se a pasta de dados existe.
    Se n√£o existir, cria automaticamente (em CI) ou alerta localmente.
    """
    print(f"üìÇ Diret√≥rio base: {BASE_DIR}")
    print(f"üìä Pasta de dados: {DATA_DIR}")

    if not os.path.exists(DATA_DIR):
        print("‚ö†Ô∏è Pasta de dados n√£o encontrada. Criando diret√≥rio vazio...")
        os.makedirs(DATA_DIR, exist_ok=True)
        print(f"üìÅ Criado: {DATA_DIR}")

def rodar_simulacoes():
    """
    Executa as simula√ß√µes principais da ponte qu√¢ntica criog√™nica.
    """
    print("\nüöÄ Iniciando simula√ß√µes qu√¢nticas...")

    try:
        from simulations.quantum_bridge import executar_ponte_quantica
        from simulations.cryo_dynamics import simular_dinamica_criogenica
    except ModuleNotFoundError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Verifique se a pasta 'simulations' est√° dentro de 'fonte/' e cont√©m __init__.py")
        raise

    resultados_ponte = executar_ponte_quantica()
    resultados_cryo = simular_dinamica_criogenica()

    print("\n‚úÖ Simula√ß√µes conclu√≠das com sucesso!")
    print(f"üßä Resultados criog√™nicos: {resultados_cryo}")
    print(f"üîó Resultados qu√¢nticos: {resultados_ponte}")

def salvar_log_execucao():
    """
    Salva um log da execu√ß√£o no diret√≥rio 'logs'.
    """
    os.makedirs(LOGS_DIR, exist_ok=True)
    log_path = os.path.join(LOGS_DIR, f"execucao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")

    with open(log_path, "w", encoding="utf-8") as f:
        f.write("Execu√ß√£o conclu√≠da com sucesso.\n")
        f.write(f"Data: {datetime.now()}\n")
        f.write(f"Diret√≥rio de dados: {DATA_DIR}\n")

    print(f"üìù Log salvo em: {log_path}")

def main():
    try:
        verificar_pasta_dados()
        rodar_simulacoes()
        salvar_log_execucao()
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
